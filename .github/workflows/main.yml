# 工作流程的名称
name: Update Filtered Calendar

# 触发工作流程的事件
on:
  # 1. 定时触发：使用 cron 语法，'*/15 * * * *' 表示每15分钟运行一次
  schedule:
    - cron: '*/15 * * * *'
  # 2. 手动触发：允许你在 Actions 页面手动点击运行，方便测试
  workflow_dispatch:

# 定义工作任务
jobs:
  build-and-deploy:
    # 运行环境
    runs-on: ubuntu-latest
    
    # 任务步骤
    steps:
      # 第一步：检出（下载）你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 第二步：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11' # 你可以选择合适的 Python 版本

      # 第三步：安装脚本所需的依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 第四步：运行你的 Python 脚本来生成 .ics 文件
      - name: Run calendar filter script
        env:
          # 将仓库的 Secret 传递给脚本的环境变量
          SOURCE_CALENDAR_URL: ${{ secrets.SOURCE_CALENDAR_URL }}
        run: python calendar_updater/filter_calendar.py

      # 第五步：将生成的 .ics 文件部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          # 需要 GitHub Token 来进行推送操作
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 要发布的目录，'.' 表示当前目录
          publish_dir: .
          # 指定只将 filtered_calendar.ics 文件推送到 gh-pages 分支
          # 这样可以保持分支的干净
          publish_branch: gh-pages
          # 确保只有这个文件被添加，不会删除分支上的其他文件（如果有的话）
          keep_files: true
          # 允许推送空提交，确保即使日历内容没变，运行时间戳也会更新
          allow_empty_commit: true
          # 提交信息
          commit_message: "chore: auto-update calendar feed"
          # 仅推送过滤后的日历文件
          force_orphan: false # 改为false更安全
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          # 通过 `globs` 精确指定要推送的文件
          publish_exclude: '.*, *.py, *.txt, *.yml, *.md' # 排除所有非ics文件
